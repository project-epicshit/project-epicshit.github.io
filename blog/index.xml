<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on -:: Cloud is yours and all the new things ::-</title><link>http://192.168.69.22:1313/blog/</link><description>Recent content in Blogs on -:: Cloud is yours and all the new things ::-</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 22 Jan 2021 06:00:00 +0200</lastBuildDate><atom:link href="http://192.168.69.22:1313/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Installer Addon for NetApp Trident using kubectl - Update</title><link>http://192.168.69.22:1313/blog/2021/01/22/tridentautomatedinstall_update/</link><pubDate>Fri, 22 Jan 2021 06:00:00 +0200</pubDate><guid>http://192.168.69.22:1313/blog/2021/01/22/tridentautomatedinstall_update/</guid><description>Trident Installer Addon Three month ago I published my first version of an automated NetApp Trident installer for Kubernetes cluster. In the last days I had some time to continue development on my installer. Time to change: my first version based on a bash script which runs in extra docker container. For running the script it was required to mount the kubeconfig file into the docker container.
Now the architecture of the installer changed to a single manifest which includes all required parts.</description></item><item><title>Automated install of NetApp Trident using kubectl</title><link>http://192.168.69.22:1313/blog/2020/09/10/tridentautomatedinstall/</link><pubDate>Thu, 10 Sep 2020 07:00:00 +0200</pubDate><guid>http://192.168.69.22:1313/blog/2020/09/10/tridentautomatedinstall/</guid><description>Who wasn‘t yet faced the challenge to install NetApp Trident on multiple kubernetes clusters? NetApp provides very good documentation on ReadTheDocs. But you must execute the instruction step by step.
In addition to this documentation, I would like to introduce a way to install trident automatically in any k8s cluster via kubectl.
The following yaml file can be used for this:
--- apiVersion: v1 kind: Pod metadata: name: k8s-trident-installer labels: app: trident-installer spec: containers: - name: installer image: fabianborn/k8s-trident-installer:latest ports: - containerPort: 19811 volumeMounts: - name: kconfig mountPath: &amp;#34;/config&amp;#34; subPath: kubeconfig env: - name: DEBUG value: &amp;#34;0&amp;#34; volumes: - name: kconfig configMap: name: trident-install-kubeconfig In preparation, the yaml file subPath: kubeconfig must be adapted to the original kubeconfig name.</description></item><item><title>NetApp Ansible Authentication with Hashicorp Vault</title><link>http://192.168.69.22:1313/blog/2020/05/08/netapp-ansible-with-hcav/</link><pubDate>Fri, 08 May 2020 12:45:00 +0200</pubDate><guid>http://192.168.69.22:1313/blog/2020/05/08/netapp-ansible-with-hcav/</guid><description>NetApp Ansible Authentication with Hashicorp Vault Today I want to show how to use NetApp Ansible Modules together with a Credential Store. Although Ansible comes also with a vault, but I decided to use Hashicorp Vault today.
The advantage of Hashicorp Vault is that you have a central management of credentials. The credential store can also be designed redundantly. The installation is easy and very fast.
All actions described here can also be done via WebUI.</description></item><item><title>Multi Cloud Connect with Ansible - connect the hyperscaler</title><link>http://192.168.69.22:1313/blog/2019/09/30/multicloudconnect-w-ansible-connect/</link><pubDate>Mon, 30 Sep 2019 17:00:05 +0200</pubDate><guid>http://192.168.69.22:1313/blog/2019/09/30/multicloudconnect-w-ansible-connect/</guid><description>The last two posts shows the setup of the native vpn services on Azure and Google Cloud Platform. Now I will show you how the connection can etablish between both hyperscaler.
Create VPN Tunnel on GCP - name: &amp;#34;GCP: create a vpn tunnel&amp;#34; gcp_compute_vpn_tunnel: name: &amp;#34;testobject&amp;#34; region: &amp;#34;{{ gcp_region }}&amp;#34; peer_ip: &amp;#34;{{ output_ip_address.state.ip_address }}&amp;#34; target_vpn_gateway: &amp;#34;{{ gateway }}&amp;#34; #remote_traffic_selector: &amp;#34;{{ az_network }}&amp;#34; local_traffic_selector: &amp;#34;{{ gcp_subnet }}&amp;#34; shared_secret: &amp;#34;{{ shared_key }}&amp;#34; project: &amp;#34;{{ gcp_project }}&amp;#34; auth_kind: &amp;#34;{{ gcp_cred_kind }}&amp;#34; service_account_file: &amp;#34;{{ gcp_cred_file }}&amp;#34; state: present when: google == &amp;#34;present&amp;#34; Create VPN Tunnel on Azure For creating the the vpn gateway you cannot use ansible, because there are no modules available yet.</description></item><item><title>Multi Cloud Connect with Ansible - configure GCP</title><link>http://192.168.69.22:1313/blog/2019/09/10/multicloudconnect-w-ansible-gcp/</link><pubDate>Tue, 10 Sep 2019 18:00:00 +0200</pubDate><guid>http://192.168.69.22:1313/blog/2019/09/10/multicloudconnect-w-ansible-gcp/</guid><description>The last post shows how you can configure a VPN Gateway in Azure. Now I will show you how it works in Google Cloud Platform.
But first this post repeats the requirements form the last one. So we need a working authorization to the hyperscaler and our required network configuration.
Google, Azure and AWS provides the information, how you can connect the platform with Ansible. So I linked only the documentation:</description></item><item><title>Multi Cloud Connect with Ansible starting with Azure</title><link>http://192.168.69.22:1313/blog/2019/09/06/multicloudconnect-w-ansible/</link><pubDate>Fri, 06 Sep 2019 18:00:00 +0200</pubDate><guid>http://192.168.69.22:1313/blog/2019/09/06/multicloudconnect-w-ansible/</guid><description>Everyone talks about cloud in this day and age. Everyone wants to test the diverse possibilities of hyperscaler like Amazon AWS, Microsoft Azure or Google Cloud.
At least if you want to use the services of other hyperscalers safely at the same time, you should think about an encrypted connection. Each Hyperscaler offers the possibility to establish &amp;ldquo;direct connections&amp;rdquo; with your own company. All traffic will be routed through your corperate network.</description></item><item><title>Jenkins K8s NetApp CI/CD Demo - Part 2</title><link>http://192.168.69.22:1313/blog/2019/04/03/jenkins-kubernetes-netapp-cicd-integration-p2/</link><pubDate>Wed, 03 Apr 2019 21:00:00 +0200</pubDate><guid>http://192.168.69.22:1313/blog/2019/04/03/jenkins-kubernetes-netapp-cicd-integration-p2/</guid><description>The last article shows, how you should prepare your environment. This post describes the configuration of GitLab and Jenkins.
Jenkins configuration At first Jenkins has to be configured. This will be done by WebUI, which is reachable by http://NODE_IP:8080/login
After a successfull authenication you will redirect to the Jenkins Dashboard. Configuring Credentials For the CI/CD demo with the WebApp requires some credentials:
for Docker Hub, for uploading the Docker image GitLab for reading the files or starting the WebHook Credential for Dockerhub On the left side go to &amp;ldquo;Credential&amp;rdquo; -&amp;gt; &amp;ldquo;System&amp;rdquo; -&amp;gt; &amp;ldquo;Global credential (unrestricted)&amp;rdquo; -&amp;gt; &amp;ldquo;Add Credential&amp;rdquo;</description></item><item><title>Jenkins K8s NetApp CI/CD Demo - Part 1</title><link>http://192.168.69.22:1313/blog/2019/03/21/jenkins-kubernetes-netapp-cicd-integration-p1/</link><pubDate>Thu, 21 Mar 2019 13:00:00 +0200</pubDate><guid>http://192.168.69.22:1313/blog/2019/03/21/jenkins-kubernetes-netapp-cicd-integration-p1/</guid><description>This example will show you the CI/CD integration with Jenkins, Kubernetes and NetApp on a simple Web Application.
Pre-requisits Before start this demo there are some requirements:
Docker Hub Account for publishing the docker image a GIT repository (Github, Gitlab, Bitbucket, etc.) Kubernetes Cluster NetApp Storage System (FAS/AFF/CVO) Trident must be configured in K8s cluster &amp;ndash; Link: Trident Docs helm charts must be configured in K8s cluster &amp;ndash; Link: Helm Chart Docs Preparation environment Cloning Git repository Goto my GitHub repository: github-repo</description></item><item><title>UPDATE: Datacollector für HomeMatic und Grafana mit PoSH</title><link>http://192.168.69.22:1313/blog/2018/09/04/datacollector-grafana-ps/</link><pubDate>Tue, 04 Sep 2018 12:45:00 +0200</pubDate><guid>http://192.168.69.22:1313/blog/2018/09/04/datacollector-grafana-ps/</guid><description>Update: Jetzt mit Powershell Nach dem das Powershell Skript eine weile lief, habe ich mich daran gemacht, es einwenig umzubauen. Anforderung war, dass es in bestimmten Abständen laufen soll, aber man hierfür nicht die Cron von Linux nehmen muss. Ich habe mich dann Entschieden Powershell 6 Core zu verweden.
Wie bekomme ich die Daten aus der CCU? Die Daten werden aus den verschiedenen URLS
http://ip/config/xmlapi/roomlist.cgi Auflistung der Rooms http://ip/config/xmlapi/state.</description></item><item><title>Datacollector für HomeMatic und Grafana</title><link>http://192.168.69.22:1313/blog/2017/03/31/datacollector-grafana/</link><pubDate>Fri, 31 Mar 2017 12:00:00 +0200</pubDate><guid>http://192.168.69.22:1313/blog/2017/03/31/datacollector-grafana/</guid><description>Wer kennt das nicht. Heizt die Heizung richtig? Wie verhält sich die Raumtemperatur? Wie sieht es mit der Luftfeutigkeit im Zimmer aus?
Homematic bietet zwar die Möglichkeit Werte in einem Graphen darzustellen. Das war für mich allerdings sehr unbefriedigend. Und eine andere Lösung muss her:
Visualisierung mit Grafana Grafana bietet die beste Möglichkeit, Werte zur visualisieren. Dies setzt neben einer lauffähigen Grafana Instanz auch einen Datacollector voraus, der die Daten von der Homematic CCU2 ausliest, verarbeitet und an Grafana sendet.</description></item></channel></rss>